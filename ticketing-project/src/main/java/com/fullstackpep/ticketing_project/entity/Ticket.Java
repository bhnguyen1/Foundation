package com.fullstackpep.ticketing_project.entity;

import jakarta.persistence.*;

/*
 * A class that represents a ticket in the system 
*/

@Entity
//@Table(name = "ticket") - we will implment the table later
public class Ticket {
    @Column(name="ticketId")
    @Id @GeneratedValue
    /*
     * A unique identifier for the ticket automatically generated by the database
    */
    private Integer ticketId;

    /**
     * The id for the user who has submitted a ticket
    */
    private Integer submittedBy;
    
    /*
     * The amount of the ticket needed for reimbursement
    */
    private int amount;

    /*
     * The description for the ticket
    */
    private String description;

    /*
     * The status of the ticket (either PENDING, APPROVED, or DENIED)
    */
    @Enumerated(EnumType.STRING)
    private Status status;

    public enum Status {
        PENDING,
        APPROVED,
        DENIED
    }

    /*
     * A default, no-argument constructor
    */
    public Ticket() {
    }

    /*
     * When a new Ticket is created, the id can be generated by the database.
     * In that case, a constructor without ticketId is needed.
     * @param amount
     * @param description
     * @param status
    */
    public Ticket(Integer submittedBy, int amount, String description, Status status) {
        this.submittedBy = submittedBy;
        this.amount = amount;
        this.description = description;
        this.status = status;
    }

    /*
     * When a Ticket is retrieved from the database, the id is known.
    */
    public Ticket(Integer ticketId, Integer submittedBy, int amount, String description, Status status) {
        this.ticketId = ticketId;
        this.submittedBy = submittedBy;
        this.amount = amount;
        this.description = description;
        this.status = status;
    }

    public Integer getTicketId() {
        return ticketId;
    }

    public void setTicketId(Integer ticketId) {
        this.ticketId = ticketId;
    }

    public Integer getSubmittedBy() {
        return submittedBy;
    }

    public void setSubmittedBy(Integer submittedBy) {
        this.submittedBy = submittedBy;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    //May include the Override equals method
    /*
     * Overriding the default equals method
     * this adds functionality to tell when two objects are identical, allowing 
     * Assert.assertEquals and List.contatin to function properly
     * @param o - the object to compare to
     * @return true if o is equal to this, false otherwise 
    */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if(o == null) {
            return false;
        }
        if (getClass() != o.getClass()) {
            return false;
        }
        Ticket other = (Ticket) o;
        if(ticketId == null) {
            if(other.ticketId != null) {
                return false;
            }
        } else if (!ticketId.equals(other.ticketId)) {
            return false;
        }
        if(submittedBy == null) {
            if(other.submittedBy != null) {
                return false;
            }
        } else if (!submittedBy.equals(other.submittedBy)) {
            return false;
        }
        if(amount != other.amount) {
            return false;
        }
        if(description == null) {
            if(other.description != null) {
                return false;
            }
        } else if (!description.equals(other.description)) {
            return false;
        }
        if(status == null) {
            if(other.status != null) {
                return false;
            }
        } else if (!status.equals(other.status)) {
            return false;
        }
        return true;
    }

    //May include the override default toString method, allows for easy debugging
    //@return a string representation of the object
    @Override
    public String toString() {
        return "Ticket{" +
                "ticketId=" + ticketId +
                ", amount=" + amount +
                ", description='" + description + '\'' +
                ", status=" + status +
                '}';
    }
}

