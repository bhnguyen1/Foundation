package com.fullstackpep.ticketing_project.entity;

import jakarta.persistence.*;

/*
 * A User class that represents a user in the system
 */

@Entity
@Table(name = "users") //we will implment the table later 
public class User {
    @Column(name = "userId")
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    /*
     * A unique identifier for the user automatically generated by the database
     */
    private Integer userId;

    /*
     * A username for the user (must be unique)
    */
    private String username;
    
    /*
     * A password for the user (must be over 4 charcters)
    */
    private String password;

    /*
     * The role of the user (either EMPLOYEE or MANAGER) 
    */
    @Enumerated(EnumType.STRING)
    private Role role;

    public enum Role {
        EMPLOYEE, 
        MANAGER
    }

    //May need to include List of Tickets so that way we can have a one to many relationship to find all tickets by a user

    /*
     * A default, no-argument constructor
    */
    public User() {
    }

    
    /*
     * When a new User is created, the id can be generated by the database.
     * In that case, a constructor without userId is needed.
     * @param username
     * @param password
    */
    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.role = Role.EMPLOYEE;
    }

    /*
     * When a User is retrieved from the database, the id is known.
     * In that case, a constructor with userId is needed.
     * @param userId
     * @param username
     * @param password
    */
    public User(Integer userId, String username, String password) {
        this.userId = userId;
        this.username = username;
        this.password = password;
        this.role = Role.EMPLOYEE;
    }

    /*
     * Get the userId of the User 
     * @return userId
    */
    public Integer getUserId() {
        return userId;
    }

    /*
     * Set the userId of the User
     * @param userId
    */
    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    /*
     * Get the username of the User
     * @return username
    */
    public String getUsername() {
        return username;
    }

    /*
     * Set the username of the User
     * @param username
    */
    public void setUsername(String username) {
        this.username = username;
    }

    /*
     * Get the password of the User
     * @return password
    */
    public String getPassword() {
        return password;
    }

    /*
     * Set the password of the User
     * @param password
    */
    public void setPassword(String password) {
        this.password = password;
    }

    /*
     * Get the role of the User
     * @return role
    */
    public Role getRole() {
        return role;
    }

    /*
     * Set the role of the User
     * @param role
    */
    public void setRole(Role role) {
        this.role = role;
    }

    //May include the Override equals method
    /*
     * Overriding the default equals method
     * this adds functionality to tell when two objects are identical, allowing 
     * Assert.assertEquals and List.contatin to function properly
     * @param o - the object to compare to
     * @return true if o is equal to this, false otherwise 
    */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null) return false;
        if (getClass() != o.getClass()) return false;
        User other = (User) o;
        if(userId == null) {
            if(other.userId != null) {
                return false;
            }
        } else if (!userId.equals(other.userId)) {
            return false;
        }
        if(username == null) {
            if(other.username != null) {
                return false;
            }
        } else if (!username.equals(other.username)) {
            return false;
        }
        if(password == null) {
            if(other.password != null) {
                return false;
            }
        } else if (!password.equals(other.password)) {
            return false;
        }
        if(role == null) {
            if(other.role != null) {
                return false;
            }
        } else if (!role.equals(other.role)) {
            return false;
        }
        return true;
    }

    //May include the override default toString method, allows for easy debugging
    //@return a string representation of the object
    @Override
    public String toString() {
        return "User{" +
                "userId=" + userId +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                ", role=" + role +
                '}';
    }
}